// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: aclx.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AclxHealthCheckResponse_AclxServiceStatus int32

const (
	AclxHealthCheckResponse_UNKNOWN         AclxHealthCheckResponse_AclxServiceStatus = 0
	AclxHealthCheckResponse_SERVING         AclxHealthCheckResponse_AclxServiceStatus = 1
	AclxHealthCheckResponse_NOT_SERVING     AclxHealthCheckResponse_AclxServiceStatus = 2
	AclxHealthCheckResponse_SERVICE_UNKNOWN AclxHealthCheckResponse_AclxServiceStatus = 3
)

// Enum value maps for AclxHealthCheckResponse_AclxServiceStatus.
var (
	AclxHealthCheckResponse_AclxServiceStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVING",
		2: "NOT_SERVING",
		3: "SERVICE_UNKNOWN",
	}
	AclxHealthCheckResponse_AclxServiceStatus_value = map[string]int32{
		"UNKNOWN":         0,
		"SERVING":         1,
		"NOT_SERVING":     2,
		"SERVICE_UNKNOWN": 3,
	}
)

func (x AclxHealthCheckResponse_AclxServiceStatus) Enum() *AclxHealthCheckResponse_AclxServiceStatus {
	p := new(AclxHealthCheckResponse_AclxServiceStatus)
	*p = x
	return p
}

func (x AclxHealthCheckResponse_AclxServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclxHealthCheckResponse_AclxServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_aclx_proto_enumTypes[0].Descriptor()
}

func (AclxHealthCheckResponse_AclxServiceStatus) Type() protoreflect.EnumType {
	return &file_aclx_proto_enumTypes[0]
}

func (x AclxHealthCheckResponse_AclxServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclxHealthCheckResponse_AclxServiceStatus.Descriptor instead.
func (AclxHealthCheckResponse_AclxServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{2, 0}
}

type AclxBaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AclxBaseResponse) Reset() {
	*x = AclxBaseResponse{}
	mi := &file_aclx_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclxBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclxBaseResponse) ProtoMessage() {}

func (x *AclxBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclxBaseResponse.ProtoReflect.Descriptor instead.
func (*AclxBaseResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{0}
}

func (x *AclxBaseResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AclxBaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AclxHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *AclxHealthCheckRequest) Reset() {
	*x = AclxHealthCheckRequest{}
	mi := &file_aclx_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclxHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclxHealthCheckRequest) ProtoMessage() {}

func (x *AclxHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclxHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*AclxHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{1}
}

func (x *AclxHealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type AclxHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status AclxHealthCheckResponse_AclxServiceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.AclxHealthCheckResponse_AclxServiceStatus" json:"status,omitempty"`
}

func (x *AclxHealthCheckResponse) Reset() {
	*x = AclxHealthCheckResponse{}
	mi := &file_aclx_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclxHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclxHealthCheckResponse) ProtoMessage() {}

func (x *AclxHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclxHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*AclxHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{2}
}

func (x *AclxHealthCheckResponse) GetStatus() AclxHealthCheckResponse_AclxServiceStatus {
	if x != nil {
		return x.Status
	}
	return AclxHealthCheckResponse_UNKNOWN
}

// request for regist app acl
type RegistAppAclRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *RegistAppAclRequest) Reset() {
	*x = RegistAppAclRequest{}
	mi := &file_aclx_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistAppAclRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistAppAclRequest) ProtoMessage() {}

func (x *RegistAppAclRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistAppAclRequest.ProtoReflect.Descriptor instead.
func (*RegistAppAclRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{3}
}

func (x *RegistAppAclRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

// acl api rule
type AclApiRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyType string `protobuf:"bytes,1,opt,name=policyType,proto3" json:"policyType,omitempty"`
	SubOwner   string `protobuf:"bytes,2,opt,name=subOwner,proto3" json:"subOwner,omitempty"`
	SubName    string `protobuf:"bytes,3,opt,name=subName,proto3" json:"subName,omitempty"`
	Method     string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	UrlPath    string `protobuf:"bytes,5,opt,name=urlPath,proto3" json:"urlPath,omitempty"`
	ObjOwner   string `protobuf:"bytes,6,opt,name=objOwner,proto3" json:"objOwner,omitempty"`
	ObjName    string `protobuf:"bytes,7,opt,name=objName,proto3" json:"objName,omitempty"`
}

func (x *AclApiRuleInfo) Reset() {
	*x = AclApiRuleInfo{}
	mi := &file_aclx_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclApiRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclApiRuleInfo) ProtoMessage() {}

func (x *AclApiRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclApiRuleInfo.ProtoReflect.Descriptor instead.
func (*AclApiRuleInfo) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{4}
}

func (x *AclApiRuleInfo) GetPolicyType() string {
	if x != nil {
		return x.PolicyType
	}
	return ""
}

func (x *AclApiRuleInfo) GetSubOwner() string {
	if x != nil {
		return x.SubOwner
	}
	return ""
}

func (x *AclApiRuleInfo) GetSubName() string {
	if x != nil {
		return x.SubName
	}
	return ""
}

func (x *AclApiRuleInfo) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *AclApiRuleInfo) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *AclApiRuleInfo) GetObjOwner() string {
	if x != nil {
		return x.ObjOwner
	}
	return ""
}

func (x *AclApiRuleInfo) GetObjName() string {
	if x != nil {
		return x.ObjName
	}
	return ""
}

type RegistAclApiRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App         string          `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	ApiRuleInfo *AclApiRuleInfo `protobuf:"bytes,2,opt,name=apiRuleInfo,proto3" json:"apiRuleInfo,omitempty"`
}

func (x *RegistAclApiRuleRequest) Reset() {
	*x = RegistAclApiRuleRequest{}
	mi := &file_aclx_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistAclApiRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistAclApiRuleRequest) ProtoMessage() {}

func (x *RegistAclApiRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistAclApiRuleRequest.ProtoReflect.Descriptor instead.
func (*RegistAclApiRuleRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{5}
}

func (x *RegistAclApiRuleRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *RegistAclApiRuleRequest) GetApiRuleInfo() *AclApiRuleInfo {
	if x != nil {
		return x.ApiRuleInfo
	}
	return nil
}

// Message definition for AclPermissionInfo
type AclPermissionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner       string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// 格式:,tenantId/userName
	Users  []string `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
	Groups []string `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty"`
	// 格式:tenantId/roleName
	Roles        []string `protobuf:"bytes,7,rep,name=roles,proto3" json:"roles,omitempty"`
	Domains      []string `protobuf:"bytes,8,rep,name=domains,proto3" json:"domains,omitempty"`
	Model        string   `protobuf:"bytes,9,opt,name=model,proto3" json:"model,omitempty"`
	Adapter      string   `protobuf:"bytes,10,opt,name=adapter,proto3" json:"adapter,omitempty"`
	ResourceType string   `protobuf:"bytes,11,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Resources    []string `protobuf:"bytes,12,rep,name=resources,proto3" json:"resources,omitempty"`
	Actions      []string `protobuf:"bytes,13,rep,name=actions,proto3" json:"actions,omitempty"`
	Effect       string   `protobuf:"bytes,14,opt,name=effect,proto3" json:"effect,omitempty"`
	IsEnabled    bool     `protobuf:"varint,15,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
}

func (x *AclPermissionInfo) Reset() {
	*x = AclPermissionInfo{}
	mi := &file_aclx_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclPermissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclPermissionInfo) ProtoMessage() {}

func (x *AclPermissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclPermissionInfo.ProtoReflect.Descriptor instead.
func (*AclPermissionInfo) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{6}
}

func (x *AclPermissionInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AclPermissionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AclPermissionInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AclPermissionInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AclPermissionInfo) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *AclPermissionInfo) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *AclPermissionInfo) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *AclPermissionInfo) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *AclPermissionInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AclPermissionInfo) GetAdapter() string {
	if x != nil {
		return x.Adapter
	}
	return ""
}

func (x *AclPermissionInfo) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AclPermissionInfo) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *AclPermissionInfo) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *AclPermissionInfo) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

func (x *AclPermissionInfo) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

// RegistAclPermissionRule request
type RegistAclPermissionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App        string             `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Permission *AclPermissionInfo `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *RegistAclPermissionRuleRequest) Reset() {
	*x = RegistAclPermissionRuleRequest{}
	mi := &file_aclx_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistAclPermissionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistAclPermissionRuleRequest) ProtoMessage() {}

func (x *RegistAclPermissionRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistAclPermissionRuleRequest.ProtoReflect.Descriptor instead.
func (*RegistAclPermissionRuleRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{7}
}

func (x *RegistAclPermissionRuleRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *RegistAclPermissionRuleRequest) GetPermission() *AclPermissionInfo {
	if x != nil {
		return x.Permission
	}
	return nil
}

// ReloadAppAcl request
type ReloadAppAclRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *ReloadAppAclRequest) Reset() {
	*x = ReloadAppAclRequest{}
	mi := &file_aclx_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReloadAppAclRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadAppAclRequest) ProtoMessage() {}

func (x *ReloadAppAclRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadAppAclRequest.ProtoReflect.Descriptor instead.
func (*ReloadAppAclRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{8}
}

func (x *ReloadAppAclRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

type AclxIsApiAllowedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 应用
	App      string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	SubOwner string `protobuf:"bytes,2,opt,name=subOwner,proto3" json:"subOwner,omitempty"`
	SubName  string `protobuf:"bytes,3,opt,name=subName,proto3" json:"subName,omitempty"`
	Method   string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	UrlPath  string `protobuf:"bytes,5,opt,name=urlPath,proto3" json:"urlPath,omitempty"`
	ObjOwner string `protobuf:"bytes,6,opt,name=objOwner,proto3" json:"objOwner,omitempty"`
	ObjName  string `protobuf:"bytes,7,opt,name=objName,proto3" json:"objName,omitempty"`
}

func (x *AclxIsApiAllowedRequest) Reset() {
	*x = AclxIsApiAllowedRequest{}
	mi := &file_aclx_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclxIsApiAllowedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclxIsApiAllowedRequest) ProtoMessage() {}

func (x *AclxIsApiAllowedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclxIsApiAllowedRequest.ProtoReflect.Descriptor instead.
func (*AclxIsApiAllowedRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{9}
}

func (x *AclxIsApiAllowedRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *AclxIsApiAllowedRequest) GetSubOwner() string {
	if x != nil {
		return x.SubOwner
	}
	return ""
}

func (x *AclxIsApiAllowedRequest) GetSubName() string {
	if x != nil {
		return x.SubName
	}
	return ""
}

func (x *AclxIsApiAllowedRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *AclxIsApiAllowedRequest) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *AclxIsApiAllowedRequest) GetObjOwner() string {
	if x != nil {
		return x.ObjOwner
	}
	return ""
}

func (x *AclxIsApiAllowedRequest) GetObjName() string {
	if x != nil {
		return x.ObjName
	}
	return ""
}

type AclxIsApiAllowedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllowed bool `protobuf:"varint,1,opt,name=isAllowed,proto3" json:"isAllowed,omitempty"`
}

func (x *AclxIsApiAllowedResponse) Reset() {
	*x = AclxIsApiAllowedResponse{}
	mi := &file_aclx_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclxIsApiAllowedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclxIsApiAllowedResponse) ProtoMessage() {}

func (x *AclxIsApiAllowedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclxIsApiAllowedResponse.ProtoReflect.Descriptor instead.
func (*AclxIsApiAllowedResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{10}
}

func (x *AclxIsApiAllowedResponse) GetIsAllowed() bool {
	if x != nil {
		return x.IsAllowed
	}
	return false
}

type AclxCheckLoginPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// 租户id
	TenantId string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// 用户id
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AclxCheckLoginPermissionRequest) Reset() {
	*x = AclxCheckLoginPermissionRequest{}
	mi := &file_aclx_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclxCheckLoginPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclxCheckLoginPermissionRequest) ProtoMessage() {}

func (x *AclxCheckLoginPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclxCheckLoginPermissionRequest.ProtoReflect.Descriptor instead.
func (*AclxCheckLoginPermissionRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{11}
}

func (x *AclxCheckLoginPermissionRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *AclxCheckLoginPermissionRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AclxCheckLoginPermissionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AclxCheckLoginPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllowed bool `protobuf:"varint,1,opt,name=isAllowed,proto3" json:"isAllowed,omitempty"`
}

func (x *AclxCheckLoginPermissionResponse) Reset() {
	*x = AclxCheckLoginPermissionResponse{}
	mi := &file_aclx_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AclxCheckLoginPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclxCheckLoginPermissionResponse) ProtoMessage() {}

func (x *AclxCheckLoginPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclxCheckLoginPermissionResponse.ProtoReflect.Descriptor instead.
func (*AclxCheckLoginPermissionResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{12}
}

func (x *AclxCheckLoginPermissionResponse) GetIsAllowed() bool {
	if x != nil {
		return x.IsAllowed
	}
	return false
}

// 角色信息
type RoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName  string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description  string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IsSystemRole bool   `protobuf:"varint,4,opt,name=isSystemRole,proto3" json:"isSystemRole,omitempty"` // 是否是系统角色
	IsEnabled    bool   `protobuf:"varint,5,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`       // 是否已启用
}

func (x *RoleInfo) Reset() {
	*x = RoleInfo{}
	mi := &file_aclx_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleInfo) ProtoMessage() {}

func (x *RoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleInfo.ProtoReflect.Descriptor instead.
func (*RoleInfo) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{13}
}

func (x *RoleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoleInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RoleInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RoleInfo) GetIsSystemRole() bool {
	if x != nil {
		return x.IsSystemRole
	}
	return false
}

func (x *RoleInfo) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

type EnsureRoleExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string    `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"` //租户id
	Role     *RoleInfo `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *EnsureRoleExistRequest) Reset() {
	*x = EnsureRoleExistRequest{}
	mi := &file_aclx_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnsureRoleExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureRoleExistRequest) ProtoMessage() {}

func (x *EnsureRoleExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureRoleExistRequest.ProtoReflect.Descriptor instead.
func (*EnsureRoleExistRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{14}
}

func (x *EnsureRoleExistRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *EnsureRoleExistRequest) GetRole() *RoleInfo {
	if x != nil {
		return x.Role
	}
	return nil
}

type EnsureRoleExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *EnsureRoleExistResponse) Reset() {
	*x = EnsureRoleExistResponse{}
	mi := &file_aclx_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnsureRoleExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureRoleExistResponse) ProtoMessage() {}

func (x *EnsureRoleExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureRoleExistResponse.ProtoReflect.Descriptor instead.
func (*EnsureRoleExistResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{15}
}

func (x *EnsureRoleExistResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type AddUserToRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdList []string `protobuf:"bytes,1,rep,name=userIdList,proto3" json:"userIdList,omitempty"` // 用户id列表
	RoleName   string   `protobuf:"bytes,2,opt,name=roleName,proto3" json:"roleName,omitempty"`     // 角色名
}

func (x *AddUserToRoleRequest) Reset() {
	*x = AddUserToRoleRequest{}
	mi := &file_aclx_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToRoleRequest) ProtoMessage() {}

func (x *AddUserToRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToRoleRequest.ProtoReflect.Descriptor instead.
func (*AddUserToRoleRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{16}
}

func (x *AddUserToRoleRequest) GetUserIdList() []string {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

func (x *AddUserToRoleRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

type AddUserToRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *AddUserToRoleResponse) Reset() {
	*x = AddUserToRoleResponse{}
	mi := &file_aclx_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToRoleResponse) ProtoMessage() {}

func (x *AddUserToRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToRoleResponse.ProtoReflect.Descriptor instead.
func (*AddUserToRoleResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{17}
}

func (x *AddUserToRoleResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type UserIdAndDisplayName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
}

func (x *UserIdAndDisplayName) Reset() {
	*x = UserIdAndDisplayName{}
	mi := &file_aclx_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIdAndDisplayName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndDisplayName) ProtoMessage() {}

func (x *UserIdAndDisplayName) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndDisplayName.ProtoReflect.Descriptor instead.
func (*UserIdAndDisplayName) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{18}
}

func (x *UserIdAndDisplayName) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserIdAndDisplayName) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type FindUserIdAndDisplayNameListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindUserIdAndDisplayNameListRequest) Reset() {
	*x = FindUserIdAndDisplayNameListRequest{}
	mi := &file_aclx_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserIdAndDisplayNameListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserIdAndDisplayNameListRequest) ProtoMessage() {}

func (x *FindUserIdAndDisplayNameListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserIdAndDisplayNameListRequest.ProtoReflect.Descriptor instead.
func (*FindUserIdAndDisplayNameListRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{19}
}

type FindUserIdAndDisplayNameListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*UserIdAndDisplayName `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FindUserIdAndDisplayNameListResponse) Reset() {
	*x = FindUserIdAndDisplayNameListResponse{}
	mi := &file_aclx_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserIdAndDisplayNameListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserIdAndDisplayNameListResponse) ProtoMessage() {}

func (x *FindUserIdAndDisplayNameListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserIdAndDisplayNameListResponse.ProtoReflect.Descriptor instead.
func (*FindUserIdAndDisplayNameListResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{20}
}

func (x *FindUserIdAndDisplayNameListResponse) GetList() []*UserIdAndDisplayName {
	if x != nil {
		return x.List
	}
	return nil
}

type UserServiceLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginType string `protobuf:"bytes,1,opt,name=loginType,proto3" json:"loginType,omitempty"` // 登录类型,当前只支持sso类型
	TenantId  string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`   // 租户id
	Username  string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`   // 用户名
	Password  string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`   // 密码
	App       string `protobuf:"bytes,5,opt,name=app,proto3" json:"app,omitempty"`             // app
}

func (x *UserServiceLoginRequest) Reset() {
	*x = UserServiceLoginRequest{}
	mi := &file_aclx_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserServiceLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServiceLoginRequest) ProtoMessage() {}

func (x *UserServiceLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServiceLoginRequest.ProtoReflect.Descriptor instead.
func (*UserServiceLoginRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{21}
}

func (x *UserServiceLoginRequest) GetLoginType() string {
	if x != nil {
		return x.LoginType
	}
	return ""
}

func (x *UserServiceLoginRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UserServiceLoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserServiceLoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserServiceLoginRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

type UserLoginResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountProfile *AccountProfile `protobuf:"bytes,1,opt,name=account_profile,json=accountProfile,proto3" json:"account_profile,omitempty"`
	// access token
	AccessToken string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	// refresh token
	RefreshToken string `protobuf:"bytes,3,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	// 过期时间
	Expires *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires,proto3" json:"expires,omitempty"`
	// 必须先绑定手机号
	MustBindPhone bool `protobuf:"varint,5,opt,name=mustBindPhone,proto3" json:"mustBindPhone,omitempty"`
}

func (x *UserLoginResult) Reset() {
	*x = UserLoginResult{}
	mi := &file_aclx_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLoginResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginResult) ProtoMessage() {}

func (x *UserLoginResult) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginResult.ProtoReflect.Descriptor instead.
func (*UserLoginResult) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{22}
}

func (x *UserLoginResult) GetAccountProfile() *AccountProfile {
	if x != nil {
		return x.AccountProfile
	}
	return nil
}

func (x *UserLoginResult) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *UserLoginResult) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *UserLoginResult) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *UserLoginResult) GetMustBindPhone() bool {
	if x != nil {
		return x.MustBindPhone
	}
	return false
}

type UserServiceLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *UserLoginResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // 登录结果
}

func (x *UserServiceLoginResponse) Reset() {
	*x = UserServiceLoginResponse{}
	mi := &file_aclx_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserServiceLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServiceLoginResponse) ProtoMessage() {}

func (x *UserServiceLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServiceLoginResponse.ProtoReflect.Descriptor instead.
func (*UserServiceLoginResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{23}
}

func (x *UserServiceLoginResponse) GetResult() *UserLoginResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App         string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`                 // 所属应用
	Username    string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`       // 用户名,不能为空
	DisplayName string `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"` // 显示名称,为空时其值与username值一致
	Password    string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`       // 密码，为空时将根据应用策略来确定是随机产生密码还是使用初始密码
	Phone       string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`             // 手机号，不能为空
	Email       string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`             // email
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	mi := &file_aclx_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{24}
}

func (x *CreateUserRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type CreateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *UserInfo `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	mi := &file_aclx_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{25}
}

func (x *CreateUserResponse) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// request for UserRefreshToken request
type UserServiceRefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	App          string `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *UserServiceRefreshTokenRequest) Reset() {
	*x = UserServiceRefreshTokenRequest{}
	mi := &file_aclx_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserServiceRefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServiceRefreshTokenRequest) ProtoMessage() {}

func (x *UserServiceRefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServiceRefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*UserServiceRefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{26}
}

func (x *UserServiceRefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *UserServiceRefreshTokenRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

// response for UserRefreshToken request
type UserServiceRefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  string                 `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	RefreshToken string                 `protobuf:"bytes,2,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	Expires      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *UserServiceRefreshTokenResponse) Reset() {
	*x = UserServiceRefreshTokenResponse{}
	mi := &file_aclx_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserServiceRefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServiceRefreshTokenResponse) ProtoMessage() {}

func (x *UserServiceRefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServiceRefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*UserServiceRefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{27}
}

func (x *UserServiceRefreshTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *UserServiceRefreshTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *UserServiceRefreshTokenResponse) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

type AccountProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                   // 用户id
	Username        string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`               // 用户名
	DisplayName     string   `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`         // 显示名称
	CurrentTenantId string   `protobuf:"bytes,4,opt,name=currentTenantId,proto3" json:"currentTenantId,omitempty"` // 当前租户id
	Phone           string   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`                     // phone// 用户信息
	Email           string   `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`                     // email
	EmailVerified   bool     `protobuf:"varint,7,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`    // emial是否已经校验
	Avatar          string   `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`                   // 头像
	Roles           []string `protobuf:"bytes,9,rep,name=Roles,proto3" json:"Roles,omitempty"`                     // 包含的角色列表
}

func (x *AccountProfile) Reset() {
	*x = AccountProfile{}
	mi := &file_aclx_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountProfile) ProtoMessage() {}

func (x *AccountProfile) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountProfile.ProtoReflect.Descriptor instead.
func (*AccountProfile) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{28}
}

func (x *AccountProfile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AccountProfile) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccountProfile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AccountProfile) GetCurrentTenantId() string {
	if x != nil {
		return x.CurrentTenantId
	}
	return ""
}

func (x *AccountProfile) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *AccountProfile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AccountProfile) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *AccountProfile) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *AccountProfile) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// 用户信息
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CurrentTenantId string   `protobuf:"bytes,2,opt,name=currentTenantId,proto3" json:"currentTenantId,omitempty"` // 用户当前切换的租户id
	Username        string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	DisplayName     string   `protobuf:"bytes,4,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Phone           string   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email           string   `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerified   bool     `protobuf:"varint,7,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	Status          bool     `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	IsAdmin         bool     `protobuf:"varint,9,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	Avatar          string   `protobuf:"bytes,10,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Roles           []string `protobuf:"bytes,11,rep,name=roles,proto3" json:"roles,omitempty"` // 所属角色列表
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_aclx_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{29}
}

func (x *UserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserInfo) GetCurrentTenantId() string {
	if x != nil {
		return x.CurrentTenantId
	}
	return ""
}

func (x *UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserInfo) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *UserInfo) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *UserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfo) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// request for FindUserByUserId
type FindUserByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TenantId string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *FindUserByUserIdRequest) Reset() {
	*x = FindUserByUserIdRequest{}
	mi := &file_aclx_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByUserIdRequest) ProtoMessage() {}

func (x *FindUserByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByUserIdRequest.ProtoReflect.Descriptor instead.
func (*FindUserByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{30}
}

func (x *FindUserByUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FindUserByUserIdRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// response for FindUserByUserId
type FindUserByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *UserInfo `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *FindUserByUserIdResponse) Reset() {
	*x = FindUserByUserIdResponse{}
	mi := &file_aclx_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByUserIdResponse) ProtoMessage() {}

func (x *FindUserByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByUserIdResponse.ProtoReflect.Descriptor instead.
func (*FindUserByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{31}
}

func (x *FindUserByUserIdResponse) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// request for FindUserIdList
type FindUserIdListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *FindUserIdListRequest) Reset() {
	*x = FindUserIdListRequest{}
	mi := &file_aclx_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserIdListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserIdListRequest) ProtoMessage() {}

func (x *FindUserIdListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserIdListRequest.ProtoReflect.Descriptor instead.
func (*FindUserIdListRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{32}
}

func (x *FindUserIdListRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// response for FindUserIdList
type FindUserIdListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdList []string `protobuf:"bytes,1,rep,name=userIdList,proto3" json:"userIdList,omitempty"`
}

func (x *FindUserIdListResponse) Reset() {
	*x = FindUserIdListResponse{}
	mi := &file_aclx_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserIdListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserIdListResponse) ProtoMessage() {}

func (x *FindUserIdListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserIdListResponse.ProtoReflect.Descriptor instead.
func (*FindUserIdListResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{33}
}

func (x *FindUserIdListResponse) GetUserIdList() []string {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

// request for FindUserListByPhone
type FindUserListByPhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *FindUserListByPhoneRequest) Reset() {
	*x = FindUserListByPhoneRequest{}
	mi := &file_aclx_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserListByPhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserListByPhoneRequest) ProtoMessage() {}

func (x *FindUserListByPhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserListByPhoneRequest.ProtoReflect.Descriptor instead.
func (*FindUserListByPhoneRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{34}
}

func (x *FindUserListByPhoneRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// response for FindUserListByPhone
type FindUserListByPhoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo []*UserInfo `protobuf:"bytes,1,rep,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *FindUserListByPhoneResponse) Reset() {
	*x = FindUserListByPhoneResponse{}
	mi := &file_aclx_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserListByPhoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserListByPhoneResponse) ProtoMessage() {}

func (x *FindUserListByPhoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserListByPhoneResponse.ProtoReflect.Descriptor instead.
func (*FindUserListByPhoneResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{35}
}

func (x *FindUserListByPhoneResponse) GetUserInfo() []*UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// request for FindUserListByRole
type FindUserListByRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleList []string `protobuf:"bytes,1,rep,name=roleList,proto3" json:"roleList,omitempty"`
	TenantId string   `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *FindUserListByRoleRequest) Reset() {
	*x = FindUserListByRoleRequest{}
	mi := &file_aclx_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserListByRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserListByRoleRequest) ProtoMessage() {}

func (x *FindUserListByRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserListByRoleRequest.ProtoReflect.Descriptor instead.
func (*FindUserListByRoleRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{36}
}

func (x *FindUserListByRoleRequest) GetRoleList() []string {
	if x != nil {
		return x.RoleList
	}
	return nil
}

func (x *FindUserListByRoleRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// response for FindUserListByRole
type FindUserListByRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserList []*UserInfo `protobuf:"bytes,1,rep,name=userList,proto3" json:"userList,omitempty"`
}

func (x *FindUserListByRoleResponse) Reset() {
	*x = FindUserListByRoleResponse{}
	mi := &file_aclx_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserListByRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserListByRoleResponse) ProtoMessage() {}

func (x *FindUserListByRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserListByRoleResponse.ProtoReflect.Descriptor instead.
func (*FindUserListByRoleResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{37}
}

func (x *FindUserListByRoleResponse) GetUserList() []*UserInfo {
	if x != nil {
		return x.UserList
	}
	return nil
}

type ChangeToPrivateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ChangeToPrivateAccountRequest) Reset() {
	*x = ChangeToPrivateAccountRequest{}
	mi := &file_aclx_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeToPrivateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeToPrivateAccountRequest) ProtoMessage() {}

func (x *ChangeToPrivateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeToPrivateAccountRequest.ProtoReflect.Descriptor instead.
func (*ChangeToPrivateAccountRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{38}
}

func (x *ChangeToPrivateAccountRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ChangeUserCurrentTenantIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TenantId string `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ChangeUserCurrentTenantIdRequest) Reset() {
	*x = ChangeUserCurrentTenantIdRequest{}
	mi := &file_aclx_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeUserCurrentTenantIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUserCurrentTenantIdRequest) ProtoMessage() {}

func (x *ChangeUserCurrentTenantIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUserCurrentTenantIdRequest.ProtoReflect.Descriptor instead.
func (*ChangeUserCurrentTenantIdRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{39}
}

func (x *ChangeUserCurrentTenantIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChangeUserCurrentTenantIdRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// request for FindOneTenantByTenantId
type FindOneTenantByTenantIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *FindOneTenantByTenantIdRequest) Reset() {
	*x = FindOneTenantByTenantIdRequest{}
	mi := &file_aclx_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOneTenantByTenantIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneTenantByTenantIdRequest) ProtoMessage() {}

func (x *FindOneTenantByTenantIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneTenantByTenantIdRequest.ProtoReflect.Descriptor instead.
func (*FindOneTenantByTenantIdRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{40}
}

func (x *FindOneTenantByTenantIdRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// 租户信息
type TenantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId    string `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Logo        string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// 管理员用户id
	AdminUserId   string `protobuf:"bytes,5,opt,name=adminUserId,proto3" json:"adminUserId,omitempty"`
	AdminUsername string `protobuf:"bytes,6,opt,name=adminUsername,proto3" json:"adminUsername,omitempty"`
}

func (x *TenantInfo) Reset() {
	*x = TenantInfo{}
	mi := &file_aclx_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantInfo) ProtoMessage() {}

func (x *TenantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantInfo.ProtoReflect.Descriptor instead.
func (*TenantInfo) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{41}
}

func (x *TenantInfo) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TenantInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TenantInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *TenantInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *TenantInfo) GetAdminUserId() string {
	if x != nil {
		return x.AdminUserId
	}
	return ""
}

func (x *TenantInfo) GetAdminUsername() string {
	if x != nil {
		return x.AdminUsername
	}
	return ""
}

// response for FindOneTenantByTenantId
type FindOneTenantByTenantIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant *TenantInfo `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *FindOneTenantByTenantIdResponse) Reset() {
	*x = FindOneTenantByTenantIdResponse{}
	mi := &file_aclx_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOneTenantByTenantIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneTenantByTenantIdResponse) ProtoMessage() {}

func (x *FindOneTenantByTenantIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneTenantByTenantIdResponse.ProtoReflect.Descriptor instead.
func (*FindOneTenantByTenantIdResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{42}
}

func (x *FindOneTenantByTenantIdResponse) GetTenant() *TenantInfo {
	if x != nil {
		return x.Tenant
	}
	return nil
}

type AddUserToTenantRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId   string   `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`     // 租户id
	UserIdList []string `protobuf:"bytes,2,rep,name=userIdList,proto3" json:"userIdList,omitempty"` // 用户id列表
	RoleName   string   `protobuf:"bytes,3,opt,name=roleName,proto3" json:"roleName,omitempty"`     // 角色名
}

func (x *AddUserToTenantRoleRequest) Reset() {
	*x = AddUserToTenantRoleRequest{}
	mi := &file_aclx_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToTenantRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToTenantRoleRequest) ProtoMessage() {}

func (x *AddUserToTenantRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToTenantRoleRequest.ProtoReflect.Descriptor instead.
func (*AddUserToTenantRoleRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{43}
}

func (x *AddUserToTenantRoleRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AddUserToTenantRoleRequest) GetUserIdList() []string {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

func (x *AddUserToTenantRoleRequest) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

type AddUserToTenantRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *AddUserToTenantRoleResponse) Reset() {
	*x = AddUserToTenantRoleResponse{}
	mi := &file_aclx_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToTenantRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToTenantRoleResponse) ProtoMessage() {}

func (x *AddUserToTenantRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToTenantRoleResponse.ProtoReflect.Descriptor instead.
func (*AddUserToTenantRoleResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{44}
}

func (x *AddUserToTenantRoleResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

// request for RemoveTenantUserFromTenant
type RemoveTenantUserFromTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *RemoveTenantUserFromTenantRequest) Reset() {
	*x = RemoveTenantUserFromTenantRequest{}
	mi := &file_aclx_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTenantUserFromTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTenantUserFromTenantRequest) ProtoMessage() {}

func (x *RemoveTenantUserFromTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTenantUserFromTenantRequest.ProtoReflect.Descriptor instead.
func (*RemoveTenantUserFromTenantRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{45}
}

func (x *RemoveTenantUserFromTenantRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *RemoveTenantUserFromTenantRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// request for AddUserToTenant
type AddUserToTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	// 用户所属角色名列表
	RoleNameList []string `protobuf:"bytes,3,rep,name=roleNameList,proto3" json:"roleNameList,omitempty"`
}

func (x *AddUserToTenantRequest) Reset() {
	*x = AddUserToTenantRequest{}
	mi := &file_aclx_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToTenantRequest) ProtoMessage() {}

func (x *AddUserToTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToTenantRequest.ProtoReflect.Descriptor instead.
func (*AddUserToTenantRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{46}
}

func (x *AddUserToTenantRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *AddUserToTenantRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddUserToTenantRequest) GetRoleNameList() []string {
	if x != nil {
		return x.RoleNameList
	}
	return nil
}

type AddUserToTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *UserInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AddUserToTenantResponse) Reset() {
	*x = AddUserToTenantResponse{}
	mi := &file_aclx_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserToTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToTenantResponse) ProtoMessage() {}

func (x *AddUserToTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToTenantResponse.ProtoReflect.Descriptor instead.
func (*AddUserToTenantResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{47}
}

func (x *AddUserToTenantResponse) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type FindTenantIdListByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindTenantIdListByUserIdRequest) Reset() {
	*x = FindTenantIdListByUserIdRequest{}
	mi := &file_aclx_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindTenantIdListByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTenantIdListByUserIdRequest) ProtoMessage() {}

func (x *FindTenantIdListByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTenantIdListByUserIdRequest.ProtoReflect.Descriptor instead.
func (*FindTenantIdListByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{48}
}

func (x *FindTenantIdListByUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FindTenantIdListByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantIdList []string `protobuf:"bytes,1,rep,name=tenantIdList,proto3" json:"tenantIdList,omitempty"`
}

func (x *FindTenantIdListByUserIdResponse) Reset() {
	*x = FindTenantIdListByUserIdResponse{}
	mi := &file_aclx_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindTenantIdListByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTenantIdListByUserIdResponse) ProtoMessage() {}

func (x *FindTenantIdListByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTenantIdListByUserIdResponse.ProtoReflect.Descriptor instead.
func (*FindTenantIdListByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{49}
}

func (x *FindTenantIdListByUserIdResponse) GetTenantIdList() []string {
	if x != nil {
		return x.TenantIdList
	}
	return nil
}

// request for CreateTenant
type CreateTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName   string            `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	CreatorUserId string            `protobuf:"bytes,3,opt,name=creatorUserId,proto3" json:"creatorUserId,omitempty"`
	BuiltinRoles  []*RoleInfo       `protobuf:"bytes,4,rep,name=builtinRoles,proto3" json:"builtinRoles,omitempty"`
	Properties    map[string]string `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateTenantRequest) Reset() {
	*x = CreateTenantRequest{}
	mi := &file_aclx_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantRequest) ProtoMessage() {}

func (x *CreateTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantRequest.ProtoReflect.Descriptor instead.
func (*CreateTenantRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{50}
}

func (x *CreateTenantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTenantRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateTenantRequest) GetCreatorUserId() string {
	if x != nil {
		return x.CreatorUserId
	}
	return ""
}

func (x *CreateTenantRequest) GetBuiltinRoles() []*RoleInfo {
	if x != nil {
		return x.BuiltinRoles
	}
	return nil
}

func (x *CreateTenantRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// response for CreateTenant
type CreateTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant *TenantInfo `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *CreateTenantResponse) Reset() {
	*x = CreateTenantResponse{}
	mi := &file_aclx_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantResponse) ProtoMessage() {}

func (x *CreateTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantResponse.ProtoReflect.Descriptor instead.
func (*CreateTenantResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{51}
}

func (x *CreateTenantResponse) GetTenant() *TenantInfo {
	if x != nil {
		return x.Tenant
	}
	return nil
}

// request for DeleteTenant
type DeleteTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DeleteTenantRequest) Reset() {
	*x = DeleteTenantRequest{}
	mi := &file_aclx_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantRequest) ProtoMessage() {}

func (x *DeleteTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantRequest.ProtoReflect.Descriptor instead.
func (*DeleteTenantRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteTenantRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// application signin method
type ApplicationSigninMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	Rule        string `protobuf:"bytes,3,opt,name=Rule,proto3" json:"Rule,omitempty"`
}

func (x *ApplicationSigninMethod) Reset() {
	*x = ApplicationSigninMethod{}
	mi := &file_aclx_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationSigninMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSigninMethod) ProtoMessage() {}

func (x *ApplicationSigninMethod) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSigninMethod.ProtoReflect.Descriptor instead.
func (*ApplicationSigninMethod) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{53}
}

func (x *ApplicationSigninMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationSigninMethod) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationSigninMethod) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

// application signin item
type ApplicationSigninItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Visible  bool   `protobuf:"varint,2,opt,name=Visible,proto3" json:"Visible,omitempty"`
	Rule     string `protobuf:"bytes,3,opt,name=Rule,proto3" json:"Rule,omitempty"`
	IsCustom bool   `protobuf:"varint,4,opt,name=IsCustom,proto3" json:"IsCustom,omitempty"`
}

func (x *ApplicationSigninItem) Reset() {
	*x = ApplicationSigninItem{}
	mi := &file_aclx_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationSigninItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSigninItem) ProtoMessage() {}

func (x *ApplicationSigninItem) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSigninItem.ProtoReflect.Descriptor instead.
func (*ApplicationSigninItem) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{54}
}

func (x *ApplicationSigninItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationSigninItem) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *ApplicationSigninItem) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *ApplicationSigninItem) GetIsCustom() bool {
	if x != nil {
		return x.IsCustom
	}
	return false
}

// application signup item
type ApplicationSignupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Visible  bool   `protobuf:"varint,2,opt,name=Visible,proto3" json:"Visible,omitempty"`
	Required bool   `protobuf:"varint,3,opt,name=Required,proto3" json:"Required,omitempty"`
	Regex    string `protobuf:"bytes,4,opt,name=Regex,proto3" json:"Regex,omitempty"`
	Rule     string `protobuf:"bytes,5,opt,name=Rule,proto3" json:"Rule,omitempty"`
}

func (x *ApplicationSignupItem) Reset() {
	*x = ApplicationSignupItem{}
	mi := &file_aclx_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationSignupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSignupItem) ProtoMessage() {}

func (x *ApplicationSignupItem) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSignupItem.ProtoReflect.Descriptor instead.
func (*ApplicationSignupItem) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{55}
}

func (x *ApplicationSignupItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationSignupItem) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *ApplicationSignupItem) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ApplicationSignupItem) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *ApplicationSignupItem) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

// application info
type ApplicationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner        string `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	DisplayName  string `protobuf:"bytes,3,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	Logo         string `protobuf:"bytes,4,opt,name=Logo,proto3" json:"Logo,omitempty"`
	HomepageUrl  string `protobuf:"bytes,5,opt,name=HomepageUrl,proto3" json:"HomepageUrl,omitempty"`
	Description  string `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	Organization string `protobuf:"bytes,7,opt,name=Organization,proto3" json:"Organization,omitempty"`
	// enabled password
	EnablePassword   bool                       `protobuf:"varint,8,opt,name=EnablePassword,proto3" json:"EnablePassword,omitempty"`
	EnableSignUp     bool                       `protobuf:"varint,9,opt,name=EnableSignUp,proto3" json:"EnableSignUp,omitempty"`
	EnableCodeSignin bool                       `protobuf:"varint,10,opt,name=EnableCodeSignin,proto3" json:"EnableCodeSignin,omitempty"`
	SigninMethods    []*ApplicationSigninMethod `protobuf:"bytes,11,rep,name=SigninMethods,proto3" json:"SigninMethods,omitempty"`
	SignupItems      []*ApplicationSignupItem   `protobuf:"bytes,12,rep,name=SignupItems,proto3" json:"SignupItems,omitempty"`
	SigninItems      []*ApplicationSigninItem   `protobuf:"bytes,13,rep,name=SigninItems,proto3" json:"SigninItems,omitempty"`
	SignupUrl        string                     `protobuf:"bytes,14,opt,name=SignupUrl,proto3" json:"SignupUrl,omitempty"`
	SigninUrl        string                     `protobuf:"bytes,15,opt,name=SigninUrl,proto3" json:"SigninUrl,omitempty"`
	ForgetUrl        string                     `protobuf:"bytes,16,opt,name=ForgetUrl,proto3" json:"ForgetUrl,omitempty"`
}

func (x *ApplicationInfo) Reset() {
	*x = ApplicationInfo{}
	mi := &file_aclx_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationInfo) ProtoMessage() {}

func (x *ApplicationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationInfo.ProtoReflect.Descriptor instead.
func (*ApplicationInfo) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{56}
}

func (x *ApplicationInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ApplicationInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ApplicationInfo) GetHomepageUrl() string {
	if x != nil {
		return x.HomepageUrl
	}
	return ""
}

func (x *ApplicationInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationInfo) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *ApplicationInfo) GetEnablePassword() bool {
	if x != nil {
		return x.EnablePassword
	}
	return false
}

func (x *ApplicationInfo) GetEnableSignUp() bool {
	if x != nil {
		return x.EnableSignUp
	}
	return false
}

func (x *ApplicationInfo) GetEnableCodeSignin() bool {
	if x != nil {
		return x.EnableCodeSignin
	}
	return false
}

func (x *ApplicationInfo) GetSigninMethods() []*ApplicationSigninMethod {
	if x != nil {
		return x.SigninMethods
	}
	return nil
}

func (x *ApplicationInfo) GetSignupItems() []*ApplicationSignupItem {
	if x != nil {
		return x.SignupItems
	}
	return nil
}

func (x *ApplicationInfo) GetSigninItems() []*ApplicationSigninItem {
	if x != nil {
		return x.SigninItems
	}
	return nil
}

func (x *ApplicationInfo) GetSignupUrl() string {
	if x != nil {
		return x.SignupUrl
	}
	return ""
}

func (x *ApplicationInfo) GetSigninUrl() string {
	if x != nil {
		return x.SigninUrl
	}
	return ""
}

func (x *ApplicationInfo) GetForgetUrl() string {
	if x != nil {
		return x.ForgetUrl
	}
	return ""
}

// request for FindOneApplication
type FindOneApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FindOneApplicationRequest) Reset() {
	*x = FindOneApplicationRequest{}
	mi := &file_aclx_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOneApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneApplicationRequest) ProtoMessage() {}

func (x *FindOneApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneApplicationRequest.ProtoReflect.Descriptor instead.
func (*FindOneApplicationRequest) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{57}
}

func (x *FindOneApplicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// request for FindOneApplication
type FindOneApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application *ApplicationInfo `protobuf:"bytes,1,opt,name=Application,proto3" json:"Application,omitempty"`
}

func (x *FindOneApplicationResponse) Reset() {
	*x = FindOneApplicationResponse{}
	mi := &file_aclx_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOneApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneApplicationResponse) ProtoMessage() {}

func (x *FindOneApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aclx_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneApplicationResponse.ProtoReflect.Descriptor instead.
func (*FindOneApplicationResponse) Descriptor() ([]byte, []int) {
	return file_aclx_proto_rawDescGZIP(), []int{58}
}

func (x *FindOneApplicationResponse) GetApplication() *ApplicationInfo {
	if x != nil {
		return x.Application
	}
	return nil
}

var File_aclx_proto protoreflect.FileDescriptor

var file_aclx_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x61, 0x63, 0x6c, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x40, 0x0a, 0x10, 0x41, 0x63, 0x6c, 0x78, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x41, 0x63, 0x6c, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x6c, 0x78,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x78,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x53, 0x0a,
	0x11, 0x41, 0x63, 0x6c, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x03, 0x22, 0x27, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x41,
	0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0xce, 0x01, 0x0a, 0x0e,
	0x41, 0x63, 0x6c, 0x41, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x17,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x41, 0x63, 0x6c, 0x41, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x70, 0x69, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xa2, 0x03, 0x0a, 0x11, 0x41, 0x63, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x6c, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x70, 0x70, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0xc9,
	0x01, 0x0a, 0x17, 0x41, 0x63, 0x6c, 0x78, 0x49, 0x73, 0x41, 0x70, 0x69, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x72,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x18, 0x41, 0x63,
	0x6c, 0x78, 0x49, 0x73, 0x41, 0x70, 0x69, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x1f, 0x41, 0x63, 0x6c, 0x78, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x40, 0x0a,
	0x20, 0x41, 0x63, 0x6c, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22,
	0xa4, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x16, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0x39, 0x0a, 0x17, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x52, 0x0a, 0x14,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x37, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x50, 0x0a, 0x14, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x46,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x57, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x17,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0xf3, 0x01, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3e, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x75, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6d, 0x75, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x4a, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xab, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x41, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56,
	0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x9d, 0x01, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x34, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x33, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x32, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x22, 0x4a, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x53, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x37, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x3c, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x42, 0x79, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xba,
	0x01, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x1f, 0x46,
	0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x1a, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x3d, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x57,
	0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x17, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x1f, 0x46, 0x69, 0x6e,
	0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x02, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x41, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x75, 0x0a, 0x15, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0xf1, 0x04, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x6f, 0x6d, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x53,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x72, 0x6c, 0x22, 0x2f, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xc8, 0x04,
	0x0a, 0x04, 0x41, 0x63, 0x6c, 0x78, 0x12, 0x50, 0x0a, 0x0f, 0x41, 0x63, 0x6c, 0x78, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x6c, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x41, 0x63, 0x6c, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x10,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x41, 0x63, 0x6c, 0x41, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x6c, 0x41, 0x70, 0x69, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x70, 0x70, 0x41,
	0x63, 0x6c, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x70, 0x70, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x10, 0x41, 0x63, 0x6c, 0x78, 0x49, 0x73,
	0x41, 0x70, 0x69, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x78, 0x49, 0x73, 0x41, 0x70, 0x69, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x78, 0x49, 0x73, 0x41, 0x70, 0x69, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x41,
	0x63, 0x6c, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x6c, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x78, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x5f, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x45, 0x6e, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd9, 0x07, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x10, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x5c, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4a, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x1c,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x83, 0x05, 0x0a, 0x0d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x4f,
	0x6e, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f,
	0x6e, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42,
	0x79, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x50, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x6f, 0x0a, 0x12, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x59, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aclx_proto_rawDescOnce sync.Once
	file_aclx_proto_rawDescData = file_aclx_proto_rawDesc
)

func file_aclx_proto_rawDescGZIP() []byte {
	file_aclx_proto_rawDescOnce.Do(func() {
		file_aclx_proto_rawDescData = protoimpl.X.CompressGZIP(file_aclx_proto_rawDescData)
	})
	return file_aclx_proto_rawDescData
}

var file_aclx_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_aclx_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_aclx_proto_goTypes = []any{
	(AclxHealthCheckResponse_AclxServiceStatus)(0), // 0: proto.AclxHealthCheckResponse.AclxServiceStatus
	(*AclxBaseResponse)(nil),                       // 1: proto.AclxBaseResponse
	(*AclxHealthCheckRequest)(nil),                 // 2: proto.AclxHealthCheckRequest
	(*AclxHealthCheckResponse)(nil),                // 3: proto.AclxHealthCheckResponse
	(*RegistAppAclRequest)(nil),                    // 4: proto.RegistAppAclRequest
	(*AclApiRuleInfo)(nil),                         // 5: proto.AclApiRuleInfo
	(*RegistAclApiRuleRequest)(nil),                // 6: proto.RegistAclApiRuleRequest
	(*AclPermissionInfo)(nil),                      // 7: proto.AclPermissionInfo
	(*RegistAclPermissionRuleRequest)(nil),         // 8: proto.RegistAclPermissionRuleRequest
	(*ReloadAppAclRequest)(nil),                    // 9: proto.ReloadAppAclRequest
	(*AclxIsApiAllowedRequest)(nil),                // 10: proto.AclxIsApiAllowedRequest
	(*AclxIsApiAllowedResponse)(nil),               // 11: proto.AclxIsApiAllowedResponse
	(*AclxCheckLoginPermissionRequest)(nil),        // 12: proto.AclxCheckLoginPermissionRequest
	(*AclxCheckLoginPermissionResponse)(nil),       // 13: proto.AclxCheckLoginPermissionResponse
	(*RoleInfo)(nil),                               // 14: proto.RoleInfo
	(*EnsureRoleExistRequest)(nil),                 // 15: proto.EnsureRoleExistRequest
	(*EnsureRoleExistResponse)(nil),                // 16: proto.EnsureRoleExistResponse
	(*AddUserToRoleRequest)(nil),                   // 17: proto.AddUserToRoleRequest
	(*AddUserToRoleResponse)(nil),                  // 18: proto.AddUserToRoleResponse
	(*UserIdAndDisplayName)(nil),                   // 19: proto.userIdAndDisplayName
	(*FindUserIdAndDisplayNameListRequest)(nil),    // 20: proto.FindUserIdAndDisplayNameListRequest
	(*FindUserIdAndDisplayNameListResponse)(nil),   // 21: proto.FindUserIdAndDisplayNameListResponse
	(*UserServiceLoginRequest)(nil),                // 22: proto.UserServiceLoginRequest
	(*UserLoginResult)(nil),                        // 23: proto.UserLoginResult
	(*UserServiceLoginResponse)(nil),               // 24: proto.UserServiceLoginResponse
	(*CreateUserRequest)(nil),                      // 25: proto.CreateUserRequest
	(*CreateUserResponse)(nil),                     // 26: proto.CreateUserResponse
	(*UserServiceRefreshTokenRequest)(nil),         // 27: proto.UserServiceRefreshTokenRequest
	(*UserServiceRefreshTokenResponse)(nil),        // 28: proto.UserServiceRefreshTokenResponse
	(*AccountProfile)(nil),                         // 29: proto.AccountProfile
	(*UserInfo)(nil),                               // 30: proto.UserInfo
	(*FindUserByUserIdRequest)(nil),                // 31: proto.FindUserByUserIdRequest
	(*FindUserByUserIdResponse)(nil),               // 32: proto.FindUserByUserIdResponse
	(*FindUserIdListRequest)(nil),                  // 33: proto.FindUserIdListRequest
	(*FindUserIdListResponse)(nil),                 // 34: proto.FindUserIdListResponse
	(*FindUserListByPhoneRequest)(nil),             // 35: proto.FindUserListByPhoneRequest
	(*FindUserListByPhoneResponse)(nil),            // 36: proto.FindUserListByPhoneResponse
	(*FindUserListByRoleRequest)(nil),              // 37: proto.FindUserListByRoleRequest
	(*FindUserListByRoleResponse)(nil),             // 38: proto.FindUserListByRoleResponse
	(*ChangeToPrivateAccountRequest)(nil),          // 39: proto.ChangeToPrivateAccountRequest
	(*ChangeUserCurrentTenantIdRequest)(nil),       // 40: proto.ChangeUserCurrentTenantIdRequest
	(*FindOneTenantByTenantIdRequest)(nil),         // 41: proto.FindOneTenantByTenantIdRequest
	(*TenantInfo)(nil),                             // 42: proto.TenantInfo
	(*FindOneTenantByTenantIdResponse)(nil),        // 43: proto.FindOneTenantByTenantIdResponse
	(*AddUserToTenantRoleRequest)(nil),             // 44: proto.AddUserToTenantRoleRequest
	(*AddUserToTenantRoleResponse)(nil),            // 45: proto.AddUserToTenantRoleResponse
	(*RemoveTenantUserFromTenantRequest)(nil),      // 46: proto.RemoveTenantUserFromTenantRequest
	(*AddUserToTenantRequest)(nil),                 // 47: proto.AddUserToTenantRequest
	(*AddUserToTenantResponse)(nil),                // 48: proto.AddUserToTenantResponse
	(*FindTenantIdListByUserIdRequest)(nil),        // 49: proto.FindTenantIdListByUserIdRequest
	(*FindTenantIdListByUserIdResponse)(nil),       // 50: proto.FindTenantIdListByUserIdResponse
	(*CreateTenantRequest)(nil),                    // 51: proto.CreateTenantRequest
	(*CreateTenantResponse)(nil),                   // 52: proto.CreateTenantResponse
	(*DeleteTenantRequest)(nil),                    // 53: proto.DeleteTenantRequest
	(*ApplicationSigninMethod)(nil),                // 54: proto.ApplicationSigninMethod
	(*ApplicationSigninItem)(nil),                  // 55: proto.ApplicationSigninItem
	(*ApplicationSignupItem)(nil),                  // 56: proto.ApplicationSignupItem
	(*ApplicationInfo)(nil),                        // 57: proto.ApplicationInfo
	(*FindOneApplicationRequest)(nil),              // 58: proto.FindOneApplicationRequest
	(*FindOneApplicationResponse)(nil),             // 59: proto.FindOneApplicationResponse
	nil,                                            // 60: proto.CreateTenantRequest.PropertiesEntry
	(*timestamppb.Timestamp)(nil),                  // 61: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                          // 62: google.protobuf.Empty
}
var file_aclx_proto_depIdxs = []int32{
	0,  // 0: proto.AclxHealthCheckResponse.status:type_name -> proto.AclxHealthCheckResponse.AclxServiceStatus
	5,  // 1: proto.RegistAclApiRuleRequest.apiRuleInfo:type_name -> proto.AclApiRuleInfo
	7,  // 2: proto.RegistAclPermissionRuleRequest.permission:type_name -> proto.AclPermissionInfo
	14, // 3: proto.EnsureRoleExistRequest.role:type_name -> proto.RoleInfo
	19, // 4: proto.FindUserIdAndDisplayNameListResponse.list:type_name -> proto.userIdAndDisplayName
	29, // 5: proto.UserLoginResult.account_profile:type_name -> proto.AccountProfile
	61, // 6: proto.UserLoginResult.expires:type_name -> google.protobuf.Timestamp
	23, // 7: proto.UserServiceLoginResponse.result:type_name -> proto.UserLoginResult
	30, // 8: proto.CreateUserResponse.userInfo:type_name -> proto.UserInfo
	61, // 9: proto.UserServiceRefreshTokenResponse.expires:type_name -> google.protobuf.Timestamp
	30, // 10: proto.FindUserByUserIdResponse.userInfo:type_name -> proto.UserInfo
	30, // 11: proto.FindUserListByPhoneResponse.userInfo:type_name -> proto.UserInfo
	30, // 12: proto.FindUserListByRoleResponse.userList:type_name -> proto.UserInfo
	42, // 13: proto.FindOneTenantByTenantIdResponse.tenant:type_name -> proto.TenantInfo
	30, // 14: proto.AddUserToTenantResponse.user:type_name -> proto.UserInfo
	14, // 15: proto.CreateTenantRequest.builtinRoles:type_name -> proto.RoleInfo
	60, // 16: proto.CreateTenantRequest.properties:type_name -> proto.CreateTenantRequest.PropertiesEntry
	42, // 17: proto.CreateTenantResponse.tenant:type_name -> proto.TenantInfo
	54, // 18: proto.ApplicationInfo.SigninMethods:type_name -> proto.ApplicationSigninMethod
	56, // 19: proto.ApplicationInfo.SignupItems:type_name -> proto.ApplicationSignupItem
	55, // 20: proto.ApplicationInfo.SigninItems:type_name -> proto.ApplicationSigninItem
	57, // 21: proto.FindOneApplicationResponse.Application:type_name -> proto.ApplicationInfo
	2,  // 22: proto.Aclx.AclxHealthCheck:input_type -> proto.AclxHealthCheckRequest
	4,  // 23: proto.Aclx.RegistAppAcl:input_type -> proto.RegistAppAclRequest
	6,  // 24: proto.Aclx.RegistAclApiRule:input_type -> proto.RegistAclApiRuleRequest
	8,  // 25: proto.Aclx.RegistAclPermissionRule:input_type -> proto.RegistAclPermissionRuleRequest
	9,  // 26: proto.Aclx.ReloadAppAcl:input_type -> proto.ReloadAppAclRequest
	10, // 27: proto.Aclx.AclxIsApiAllowed:input_type -> proto.AclxIsApiAllowedRequest
	12, // 28: proto.Aclx.AclxCheckLoginPermission:input_type -> proto.AclxCheckLoginPermissionRequest
	15, // 29: proto.RoleService.EnsureRoleExist:input_type -> proto.EnsureRoleExistRequest
	22, // 30: proto.UserService.UserLogin:input_type -> proto.UserServiceLoginRequest
	25, // 31: proto.UserService.CreateUser:input_type -> proto.CreateUserRequest
	27, // 32: proto.UserService.UserRefreshToken:input_type -> proto.UserServiceRefreshTokenRequest
	31, // 33: proto.UserService.FindUserByUserId:input_type -> proto.FindUserByUserIdRequest
	33, // 34: proto.UserService.FindUserIdList:input_type -> proto.FindUserIdListRequest
	35, // 35: proto.UserService.FindUserListByPhone:input_type -> proto.FindUserListByPhoneRequest
	37, // 36: proto.UserService.FindUserListByRole:input_type -> proto.FindUserListByRoleRequest
	39, // 37: proto.UserService.ChangeToPrivateAccount:input_type -> proto.ChangeToPrivateAccountRequest
	40, // 38: proto.UserService.ChangeUserCurrentTenantId:input_type -> proto.ChangeUserCurrentTenantIdRequest
	17, // 39: proto.UserService.AddUserToRole:input_type -> proto.AddUserToRoleRequest
	20, // 40: proto.UserService.FindUserIdAndDisplayNameList:input_type -> proto.FindUserIdAndDisplayNameListRequest
	41, // 41: proto.TenantService.FindOneTenantByTenantId:input_type -> proto.FindOneTenantByTenantIdRequest
	44, // 42: proto.TenantService.AddUserToTenantRole:input_type -> proto.AddUserToTenantRoleRequest
	46, // 43: proto.TenantService.RemoveTenantUserFromTenant:input_type -> proto.RemoveTenantUserFromTenantRequest
	47, // 44: proto.TenantService.AddUserToTenant:input_type -> proto.AddUserToTenantRequest
	49, // 45: proto.TenantService.FindTenantIdListByUserId:input_type -> proto.FindTenantIdListByUserIdRequest
	51, // 46: proto.TenantService.CreateTenant:input_type -> proto.CreateTenantRequest
	53, // 47: proto.TenantService.DeleteTenant:input_type -> proto.DeleteTenantRequest
	58, // 48: proto.ApplicationService.FindOneApplication:input_type -> proto.FindOneApplicationRequest
	3,  // 49: proto.Aclx.AclxHealthCheck:output_type -> proto.AclxHealthCheckResponse
	62, // 50: proto.Aclx.RegistAppAcl:output_type -> google.protobuf.Empty
	62, // 51: proto.Aclx.RegistAclApiRule:output_type -> google.protobuf.Empty
	62, // 52: proto.Aclx.RegistAclPermissionRule:output_type -> google.protobuf.Empty
	62, // 53: proto.Aclx.ReloadAppAcl:output_type -> google.protobuf.Empty
	11, // 54: proto.Aclx.AclxIsApiAllowed:output_type -> proto.AclxIsApiAllowedResponse
	13, // 55: proto.Aclx.AclxCheckLoginPermission:output_type -> proto.AclxCheckLoginPermissionResponse
	16, // 56: proto.RoleService.EnsureRoleExist:output_type -> proto.EnsureRoleExistResponse
	24, // 57: proto.UserService.UserLogin:output_type -> proto.UserServiceLoginResponse
	26, // 58: proto.UserService.CreateUser:output_type -> proto.CreateUserResponse
	28, // 59: proto.UserService.UserRefreshToken:output_type -> proto.UserServiceRefreshTokenResponse
	32, // 60: proto.UserService.FindUserByUserId:output_type -> proto.FindUserByUserIdResponse
	34, // 61: proto.UserService.FindUserIdList:output_type -> proto.FindUserIdListResponse
	36, // 62: proto.UserService.FindUserListByPhone:output_type -> proto.FindUserListByPhoneResponse
	38, // 63: proto.UserService.FindUserListByRole:output_type -> proto.FindUserListByRoleResponse
	62, // 64: proto.UserService.ChangeToPrivateAccount:output_type -> google.protobuf.Empty
	62, // 65: proto.UserService.ChangeUserCurrentTenantId:output_type -> google.protobuf.Empty
	18, // 66: proto.UserService.AddUserToRole:output_type -> proto.AddUserToRoleResponse
	21, // 67: proto.UserService.FindUserIdAndDisplayNameList:output_type -> proto.FindUserIdAndDisplayNameListResponse
	43, // 68: proto.TenantService.FindOneTenantByTenantId:output_type -> proto.FindOneTenantByTenantIdResponse
	45, // 69: proto.TenantService.AddUserToTenantRole:output_type -> proto.AddUserToTenantRoleResponse
	62, // 70: proto.TenantService.RemoveTenantUserFromTenant:output_type -> google.protobuf.Empty
	48, // 71: proto.TenantService.AddUserToTenant:output_type -> proto.AddUserToTenantResponse
	50, // 72: proto.TenantService.FindTenantIdListByUserId:output_type -> proto.FindTenantIdListByUserIdResponse
	52, // 73: proto.TenantService.CreateTenant:output_type -> proto.CreateTenantResponse
	62, // 74: proto.TenantService.DeleteTenant:output_type -> google.protobuf.Empty
	59, // 75: proto.ApplicationService.FindOneApplication:output_type -> proto.FindOneApplicationResponse
	49, // [49:76] is the sub-list for method output_type
	22, // [22:49] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_aclx_proto_init() }
func file_aclx_proto_init() {
	if File_aclx_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aclx_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_aclx_proto_goTypes,
		DependencyIndexes: file_aclx_proto_depIdxs,
		EnumInfos:         file_aclx_proto_enumTypes,
		MessageInfos:      file_aclx_proto_msgTypes,
	}.Build()
	File_aclx_proto = out.File
	file_aclx_proto_rawDesc = nil
	file_aclx_proto_goTypes = nil
	file_aclx_proto_depIdxs = nil
}
