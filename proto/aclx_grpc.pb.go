// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: aclx.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Aclx_AclxHealthCheck_FullMethodName          = "/proto.Aclx/AclxHealthCheck"
	Aclx_RegistAppAcl_FullMethodName             = "/proto.Aclx/RegistAppAcl"
	Aclx_RegistAclApiRule_FullMethodName         = "/proto.Aclx/RegistAclApiRule"
	Aclx_RegistAclPermissionRule_FullMethodName  = "/proto.Aclx/RegistAclPermissionRule"
	Aclx_ReloadAppAcl_FullMethodName             = "/proto.Aclx/ReloadAppAcl"
	Aclx_AclxIsApiAllowed_FullMethodName         = "/proto.Aclx/AclxIsApiAllowed"
	Aclx_AclxCheckLoginPermission_FullMethodName = "/proto.Aclx/AclxCheckLoginPermission"
)

// AclxClient is the client API for Aclx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AclxClient interface {
	AclxHealthCheck(ctx context.Context, in *AclxHealthCheckRequest, opts ...grpc.CallOption) (*AclxHealthCheckResponse, error)
	// 注册acl参数
	RegistAppAcl(ctx context.Context, in *RegistAppAclRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegistAclApiRule(ctx context.Context, in *RegistAclApiRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegistAclPermissionRule(ctx context.Context, in *RegistAclPermissionRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// reload app acl
	ReloadAppAcl(ctx context.Context, in *ReloadAppAclRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AclxIsApiAllowed(ctx context.Context, in *AclxIsApiAllowedRequest, opts ...grpc.CallOption) (*AclxIsApiAllowedResponse, error)
	// 检测是否有登录的权限
	AclxCheckLoginPermission(ctx context.Context, in *AclxCheckLoginPermissionRequest, opts ...grpc.CallOption) (*AclxCheckLoginPermissionResponse, error)
}

type aclxClient struct {
	cc grpc.ClientConnInterface
}

func NewAclxClient(cc grpc.ClientConnInterface) AclxClient {
	return &aclxClient{cc}
}

func (c *aclxClient) AclxHealthCheck(ctx context.Context, in *AclxHealthCheckRequest, opts ...grpc.CallOption) (*AclxHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AclxHealthCheckResponse)
	err := c.cc.Invoke(ctx, Aclx_AclxHealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclxClient) RegistAppAcl(ctx context.Context, in *RegistAppAclRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Aclx_RegistAppAcl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclxClient) RegistAclApiRule(ctx context.Context, in *RegistAclApiRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Aclx_RegistAclApiRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclxClient) RegistAclPermissionRule(ctx context.Context, in *RegistAclPermissionRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Aclx_RegistAclPermissionRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclxClient) ReloadAppAcl(ctx context.Context, in *ReloadAppAclRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Aclx_ReloadAppAcl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclxClient) AclxIsApiAllowed(ctx context.Context, in *AclxIsApiAllowedRequest, opts ...grpc.CallOption) (*AclxIsApiAllowedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AclxIsApiAllowedResponse)
	err := c.cc.Invoke(ctx, Aclx_AclxIsApiAllowed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclxClient) AclxCheckLoginPermission(ctx context.Context, in *AclxCheckLoginPermissionRequest, opts ...grpc.CallOption) (*AclxCheckLoginPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AclxCheckLoginPermissionResponse)
	err := c.cc.Invoke(ctx, Aclx_AclxCheckLoginPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AclxServer is the server API for Aclx service.
// All implementations must embed UnimplementedAclxServer
// for forward compatibility.
type AclxServer interface {
	AclxHealthCheck(context.Context, *AclxHealthCheckRequest) (*AclxHealthCheckResponse, error)
	// 注册acl参数
	RegistAppAcl(context.Context, *RegistAppAclRequest) (*emptypb.Empty, error)
	RegistAclApiRule(context.Context, *RegistAclApiRuleRequest) (*emptypb.Empty, error)
	RegistAclPermissionRule(context.Context, *RegistAclPermissionRuleRequest) (*emptypb.Empty, error)
	// reload app acl
	ReloadAppAcl(context.Context, *ReloadAppAclRequest) (*emptypb.Empty, error)
	AclxIsApiAllowed(context.Context, *AclxIsApiAllowedRequest) (*AclxIsApiAllowedResponse, error)
	// 检测是否有登录的权限
	AclxCheckLoginPermission(context.Context, *AclxCheckLoginPermissionRequest) (*AclxCheckLoginPermissionResponse, error)
	mustEmbedUnimplementedAclxServer()
}

// UnimplementedAclxServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAclxServer struct{}

func (UnimplementedAclxServer) AclxHealthCheck(context.Context, *AclxHealthCheckRequest) (*AclxHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AclxHealthCheck not implemented")
}
func (UnimplementedAclxServer) RegistAppAcl(context.Context, *RegistAppAclRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistAppAcl not implemented")
}
func (UnimplementedAclxServer) RegistAclApiRule(context.Context, *RegistAclApiRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistAclApiRule not implemented")
}
func (UnimplementedAclxServer) RegistAclPermissionRule(context.Context, *RegistAclPermissionRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistAclPermissionRule not implemented")
}
func (UnimplementedAclxServer) ReloadAppAcl(context.Context, *ReloadAppAclRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadAppAcl not implemented")
}
func (UnimplementedAclxServer) AclxIsApiAllowed(context.Context, *AclxIsApiAllowedRequest) (*AclxIsApiAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AclxIsApiAllowed not implemented")
}
func (UnimplementedAclxServer) AclxCheckLoginPermission(context.Context, *AclxCheckLoginPermissionRequest) (*AclxCheckLoginPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AclxCheckLoginPermission not implemented")
}
func (UnimplementedAclxServer) mustEmbedUnimplementedAclxServer() {}
func (UnimplementedAclxServer) testEmbeddedByValue()              {}

// UnsafeAclxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AclxServer will
// result in compilation errors.
type UnsafeAclxServer interface {
	mustEmbedUnimplementedAclxServer()
}

func RegisterAclxServer(s grpc.ServiceRegistrar, srv AclxServer) {
	// If the following call pancis, it indicates UnimplementedAclxServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Aclx_ServiceDesc, srv)
}

func _Aclx_AclxHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclxHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclxServer).AclxHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aclx_AclxHealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclxServer).AclxHealthCheck(ctx, req.(*AclxHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aclx_RegistAppAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistAppAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclxServer).RegistAppAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aclx_RegistAppAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclxServer).RegistAppAcl(ctx, req.(*RegistAppAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aclx_RegistAclApiRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistAclApiRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclxServer).RegistAclApiRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aclx_RegistAclApiRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclxServer).RegistAclApiRule(ctx, req.(*RegistAclApiRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aclx_RegistAclPermissionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistAclPermissionRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclxServer).RegistAclPermissionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aclx_RegistAclPermissionRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclxServer).RegistAclPermissionRule(ctx, req.(*RegistAclPermissionRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aclx_ReloadAppAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadAppAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclxServer).ReloadAppAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aclx_ReloadAppAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclxServer).ReloadAppAcl(ctx, req.(*ReloadAppAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aclx_AclxIsApiAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclxIsApiAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclxServer).AclxIsApiAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aclx_AclxIsApiAllowed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclxServer).AclxIsApiAllowed(ctx, req.(*AclxIsApiAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aclx_AclxCheckLoginPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclxCheckLoginPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclxServer).AclxCheckLoginPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aclx_AclxCheckLoginPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclxServer).AclxCheckLoginPermission(ctx, req.(*AclxCheckLoginPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aclx_ServiceDesc is the grpc.ServiceDesc for Aclx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aclx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Aclx",
	HandlerType: (*AclxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AclxHealthCheck",
			Handler:    _Aclx_AclxHealthCheck_Handler,
		},
		{
			MethodName: "RegistAppAcl",
			Handler:    _Aclx_RegistAppAcl_Handler,
		},
		{
			MethodName: "RegistAclApiRule",
			Handler:    _Aclx_RegistAclApiRule_Handler,
		},
		{
			MethodName: "RegistAclPermissionRule",
			Handler:    _Aclx_RegistAclPermissionRule_Handler,
		},
		{
			MethodName: "ReloadAppAcl",
			Handler:    _Aclx_ReloadAppAcl_Handler,
		},
		{
			MethodName: "AclxIsApiAllowed",
			Handler:    _Aclx_AclxIsApiAllowed_Handler,
		},
		{
			MethodName: "AclxCheckLoginPermission",
			Handler:    _Aclx_AclxCheckLoginPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aclx.proto",
}

const (
	RoleService_EnsureRoleExist_FullMethodName = "/proto.RoleService/EnsureRoleExist"
)

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	EnsureRoleExist(ctx context.Context, in *EnsureRoleExistRequest, opts ...grpc.CallOption) (*EnsureRoleExistResponse, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) EnsureRoleExist(ctx context.Context, in *EnsureRoleExistRequest, opts ...grpc.CallOption) (*EnsureRoleExistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnsureRoleExistResponse)
	err := c.cc.Invoke(ctx, RoleService_EnsureRoleExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility.
type RoleServiceServer interface {
	EnsureRoleExist(context.Context, *EnsureRoleExistRequest) (*EnsureRoleExistResponse, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleServiceServer struct{}

func (UnimplementedRoleServiceServer) EnsureRoleExist(context.Context, *EnsureRoleExistRequest) (*EnsureRoleExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureRoleExist not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}
func (UnimplementedRoleServiceServer) testEmbeddedByValue()                     {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_EnsureRoleExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureRoleExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).EnsureRoleExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_EnsureRoleExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).EnsureRoleExist(ctx, req.(*EnsureRoleExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnsureRoleExist",
			Handler:    _RoleService_EnsureRoleExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aclx.proto",
}

const (
	UserService_UserLogin_FullMethodName        = "/proto.UserService/UserLogin"
	UserService_UserRefreshToken_FullMethodName = "/proto.UserService/UserRefreshToken"
	UserService_FindByUserId_FullMethodName     = "/proto.UserService/FindByUserId"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserLogin(ctx context.Context, in *UserServiceLoginRequest, opts ...grpc.CallOption) (*UserServiceLoginResponse, error)
	UserRefreshToken(ctx context.Context, in *UserServiceRefreshTokenRequest, opts ...grpc.CallOption) (*UserServiceRefreshTokenResponse, error)
	FindByUserId(ctx context.Context, in *UserServiceFindByUserIdRequest, opts ...grpc.CallOption) (*UserServiceFindByUserIdResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserLogin(ctx context.Context, in *UserServiceLoginRequest, opts ...grpc.CallOption) (*UserServiceLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceLoginResponse)
	err := c.cc.Invoke(ctx, UserService_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserRefreshToken(ctx context.Context, in *UserServiceRefreshTokenRequest, opts ...grpc.CallOption) (*UserServiceRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceRefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserService_UserRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindByUserId(ctx context.Context, in *UserServiceFindByUserIdRequest, opts ...grpc.CallOption) (*UserServiceFindByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceFindByUserIdResponse)
	err := c.cc.Invoke(ctx, UserService_FindByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	UserLogin(context.Context, *UserServiceLoginRequest) (*UserServiceLoginResponse, error)
	UserRefreshToken(context.Context, *UserServiceRefreshTokenRequest) (*UserServiceRefreshTokenResponse, error)
	FindByUserId(context.Context, *UserServiceFindByUserIdRequest) (*UserServiceFindByUserIdResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) UserLogin(context.Context, *UserServiceLoginRequest) (*UserServiceLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServiceServer) UserRefreshToken(context.Context, *UserServiceRefreshTokenRequest) (*UserServiceRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRefreshToken not implemented")
}
func (UnimplementedUserServiceServer) FindByUserId(context.Context, *UserServiceFindByUserIdRequest) (*UserServiceFindByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUserId not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogin(ctx, req.(*UserServiceLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserRefreshToken(ctx, req.(*UserServiceRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceFindByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindByUserId(ctx, req.(*UserServiceFindByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _UserService_UserLogin_Handler,
		},
		{
			MethodName: "UserRefreshToken",
			Handler:    _UserService_UserRefreshToken_Handler,
		},
		{
			MethodName: "FindByUserId",
			Handler:    _UserService_FindByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aclx.proto",
}
