syntax = "proto3";

// import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package="./proto";

package proto;

service Aclx {
	rpc AclxHealthCheck(AclxHealthCheckRequest) returns (AclxHealthCheckResponse);

	// 注册acl参数
	rpc RegistAppAcl(RegistAppAclRequest) returns (google.protobuf.Empty);
	rpc RegistAclApiRule(RegistAclApiRuleRequest) returns (google.protobuf.Empty);
	rpc RegistAclPermissionRule(RegistAclPermissionRuleRequest) returns (google.protobuf.Empty);
	// reload app acl
	rpc ReloadAppAcl(ReloadAppAclRequest) returns (google.protobuf.Empty);
	rpc AclxIsApiAllowed(AclxIsApiAllowedRequest) returns (AclxIsApiAllowedResponse);
	//检测是否有登录的权限
	rpc AclxCheckLoginPermission(AclxCheckLoginPermissionRequest) returns (AclxCheckLoginPermissionResponse);
	//检测是否有调用接口的权限
	rpc AclxCheckApiPermission(AclxCheckApiPermissionRequest) returns (AclxCheckApiPermissionResponse);
	//系统初始化API
	rpc AclxInitSystemAPI(AclxInitSystemAPIRequest) returns (google.protobuf.Empty);
}

service RoleService {
	rpc EnsureRoleExist(EnsureRoleExistRequest) returns (EnsureRoleExistResponse);
}

service UserService {
	rpc UserLogin(UserServiceLoginRequest) returns (UserServiceLoginResponse);
	// 创建一个用户
	rpc CreateUser(CreateUserRequest) returns(CreateUserResponse);
	rpc UserRefreshToken(UserServiceRefreshTokenRequest) returns (UserServiceRefreshTokenResponse);
	rpc FindUserByUserId(FindUserByUserIdRequest) returns (FindUserByUserIdResponse);
	// 搜索用户id列表
	rpc FindUserIdList(FindUserIdListRequest) returns (FindUserIdListResponse);
	// 根据手机号查找
	rpc FindUserListByPhone(FindUserListByPhoneRequest) returns (FindUserListByPhoneResponse);
	// 根据角色查找
	rpc FindUserListByRole(FindUserListByRoleRequest) returns (FindUserListByRoleResponse);
	// 切换到个人帐号
	rpc ChangeToPrivateAccount(ChangeToPrivateAccountRequest) returns (google.protobuf.Empty);
	// 切换到指定租户
	rpc ChangeUserCurrentTenantId(ChangeUserCurrentTenantIdRequest) returns (google.protobuf.Empty);
	// 确保用户在指定角色中
	rpc AddUserToRole(AddUserToRoleRequest) returns (AddUserToRoleResponse);
	//查询用户id和displayName组成的列表
	rpc FindUserIdAndDisplayNameList(FindUserIdAndDisplayNameListRequest) returns (FindUserIdAndDisplayNameListResponse);
}

service TenantService {
	rpc FindOneTenantByTenantId(FindOneTenantByTenantIdRequest) returns (FindOneTenantByTenantIdResponse);
	// 确保用户在指定租户角色中
	rpc AddUserToTenantRole(AddUserToTenantRoleRequest) returns (AddUserToTenantRoleResponse);
	// 将用户从租户中移除
	rpc RemoveTenantUserFromTenant(RemoveTenantUserFromTenantRequest) returns (google.protobuf.Empty);
	// 将用户id增加到租户中
	rpc AddUserToTenant(AddUserToTenantRequest) returns (AddUserToTenantResponse);
	// 查询指定的用户id的所有tenantId列表
	rpc FindTenantIdListByUserId(FindTenantIdListByUserIdRequest) returns (FindTenantIdListByUserIdResponse);
	// 创建租户
	rpc CreateTenant(CreateTenantRequest) returns (CreateTenantResponse);
	// 删除租户
	rpc DeleteTenant(DeleteTenantRequest) returns (google.protobuf.Empty);
}

// application service
service ApplicationService {
	rpc FindOneApplication(FindOneApplicationRequest) returns (FindOneApplicationResponse);
}

message AclxBaseResponse {
	int32 code = 1;
	string message = 2;
}

message AclxHealthCheckRequest {
	string service = 1;
}

message AclxHealthCheckResponse {
	enum AclxServiceStatus{
		UNKNOWN = 0;
		SERVING = 1;
		NOT_SERVING = 2;
		SERVICE_UNKNOWN = 3;
	}
	AclxServiceStatus status = 1;
}

// request for regist app acl
message RegistAppAclRequest {
	string app = 1;
}


// acl api rule
message AclApiRuleInfo {	
	string policyType = 1;
	string subOwner = 2;
	string subName = 3;
	string method = 4;
	string urlPath = 5;
	string objOwner = 6;
	string objName = 7;
}

message RegistAclApiRuleRequest {
	string app = 1;
	AclApiRuleInfo  apiRuleInfo = 2;
}

// Message definition for AclPermissionInfo
message AclPermissionInfo {
    string owner = 1;
    string name = 2;
    string displayName = 3;
    string description = 4;

	// 格式:,tenantId/userName
    repeated string users = 5;
    repeated string groups = 6;
	// 格式:tenantId/roleName
    repeated string roles = 7;
    repeated string domains = 8;

    string model = 9;
    string adapter = 10;
    string resource_type = 11;
    repeated string resources = 12;
    repeated string actions = 13;
    string effect = 14;
    bool isEnabled = 15;
}

// RegistAclPermissionRule request
message RegistAclPermissionRuleRequest {
	string app = 1;
	AclPermissionInfo permission = 2;
}

// ReloadAppAcl request
message ReloadAppAclRequest {
	string app = 1;
}

message AclxIsApiAllowedRequest {
	// 应用
	string app = 1;

	string subOwner = 2;
	string subName = 3;
	string method = 4;
	string urlPath = 5;
	string objOwner = 6;
	string objName = 7;
}

message AclxIsApiAllowedResponse {
	bool isAllowed = 1;
}

message AclxCheckLoginPermissionRequest {
	string app = 1;
	// 租户id
	string tenantId = 2;
	// 用户id
	string userId = 3;
}

message AclxCheckApiPermissionRequest {
	string app = 1;
	// 获取请求类型
	string apiMethod = 2;
	// 获取请求路径
	string apiPath = 3;
	//获取用户角色
	repeated string roles = 4;
}

message AclxInitSystemAPIRequest {
	string app = 1;
 	repeated PermissionApi apis = 2;  // Add this line to hold the list of APIs
	repeated string roles = 3;
}
message PermissionApi {
    string App = 1;
    string ApiMethod = 2;
    string ApiPath = 3;
    string PathPattern = 4;
    string GroupName = 5;
    string Description = 6;
    string DefaultPermission = 7;
    bool IsSystem = 8;
}
message AclxCheckLoginPermissionResponse {
	bool isAllowed = 1;
}

message AclxCheckApiPermissionResponse {
	bool isAllowed = 1;
}
// 角色信息
message RoleInfo {
	string name = 1;
	string displayName = 2;
	string description = 3;	
	bool isSystemRole = 4;		// 是否是系统角色	
	bool isEnabled = 5;			// 是否已启用
}

message EnsureRoleExistRequest {
	string tenantId = 1;	//租户id
	RoleInfo role = 2;
}

message EnsureRoleExistResponse {
	bool successful = 1;
}

message AddUserToRoleRequest {
	repeated string userIdList = 1; 	// 用户id列表
	string roleName = 2;				// 角色名
}

message AddUserToRoleResponse {
	bool successful = 1;
}
message  userIdAndDisplayName {
	string userId = 1;
	string displayName = 2;
	string phone = 3;
}
message FindUserIdAndDisplayNameListRequest {}
message FindUserIdAndDisplayNameListResponse {
	repeated userIdAndDisplayName list = 1;
}
message UserServiceLoginRequest {
	string loginType = 1;	  // 登录类型,当前只支持sso类型
    string tenantId = 2;      // 租户id
    string username = 3;      // 用户名
    string password = 4;      // 密码
	string app = 5;           // app
}

message UserLoginResult {
	AccountProfile account_profile = 1;
	// access token
	string accessToken = 2;  
	// refresh token
	string refreshToken = 3;
	// 过期时间
	google.protobuf.Timestamp expires = 4;
	// 必须先绑定手机号
	bool mustBindPhone = 5;
}

message UserServiceLoginResponse {
	UserLoginResult result = 1;		// 登录结果
}

message CreateUserRequest {
	string app = 1;			// 所属应用
	string username = 2; 	// 用户名,不能为空
	string displayName = 3; // 显示名称,为空时其值与username值一致
	string password = 4;	// 密码，为空时将根据应用策略来确定是随机产生密码还是使用初始密码
	string phone = 5;		// 手机号，不能为空
	string email = 6;		// email
}

message CreateUserResponse {
	UserInfo userInfo = 1;
}

// request for UserRefreshToken request
message UserServiceRefreshTokenRequest {
	string refreshToken = 1;
	string app = 2;
}

// response for UserRefreshToken request
message UserServiceRefreshTokenResponse {
	string accessToken = 1;
	string refreshToken = 2;
	google.protobuf.Timestamp expires = 3;
}

message AccountProfile {
	string userId = 1;			// 用户id
	string username = 2;  		// 用户名
	string displayName = 3;    	// 显示名称
	string currentTenantId = 4; // 当前租户id
	string phone = 5;			// phone// 用户信息
	string email = 6;			// email
	bool emailVerified =7;		// emial是否已经校验
	string avatar = 8;			// 头像
	repeated string roles = 9;	// 包含的角色列表
	string preferredMfaType = 10;
	bool mfaPhoneEnabled 	= 11;	// mfa phone是否已启用
    bool mfaEmailEnabled = 12;	// mfa email是否已启用
	repeated MfaProps multiFactorAuths  = 13; // 多因素
}

message MfaProps {
	bool enabled       				= 1;
	bool isPreferred   				= 2;
	string mfaType     				= 3;
	string secret    				= 4;
	string countryCode  			= 5;
	string url          			= 6;
	repeated string recoveryCodes	= 7;
}

// 用户信息
message UserInfo {
	string userId  = 1;
	string currentTenantId = 2;		// 用户当前切换的租户id

    string username = 3;
    string displayName = 4;
    string phone = 5;
    string email = 6;
    bool emailVerified = 7;
    bool status = 8;
    bool isAdmin = 9;
    string avatar = 10;
    repeated string roles = 11;  // 所属角色列表
}

// request for FindUserByUserId
message FindUserByUserIdRequest {
	string userId = 1;
	string tenantId = 2;
}

// response for FindUserByUserId
message FindUserByUserIdResponse {
	UserInfo userInfo = 1;
}

// request for FindUserIdList
message FindUserIdListRequest  {
	string tenantId = 1;
}

// response for FindUserIdList
message FindUserIdListResponse {
	repeated string userIdList = 1;
}

// request for FindUserListByPhone
message FindUserListByPhoneRequest {
	string phone = 1;
}

// response for FindUserListByPhone
message FindUserListByPhoneResponse {
	repeated UserInfo userInfo = 1;
}

// request for FindUserListByRole
message FindUserListByRoleRequest {
	repeated string roleList = 1;
	string tenantId = 2;
	int64 currentPage = 3;
	int64 pageSize = 4;
}

// response for FindUserListByRole
message FindUserListByRoleResponse {
	repeated UserInfo userList = 1;
	int64 total = 2;
}

message ChangeToPrivateAccountRequest {
	string userId = 1;
}

message ChangeUserCurrentTenantIdRequest {
	string userId = 1;
	string tenantId = 2;
}

// request for FindOneTenantByTenantId
message FindOneTenantByTenantIdRequest {
	string tenantId = 1;
}

// 租户信息
message TenantInfo {
	string tenantId = 1;
	string name = 2;
	string displayName = 3;
	string logo = 4;
	// 管理员用户id
	string adminUserId = 5;
	string adminUsername = 6;
}

// response for FindOneTenantByTenantId
message FindOneTenantByTenantIdResponse {
	TenantInfo tenant = 1;
}

message AddUserToTenantRoleRequest {
	string tenantId = 1; 				// 租户id
	repeated string userIdList = 2; 	// 用户id列表
	string roleName = 3;				// 角色名
}

message AddUserToTenantRoleResponse {
	bool successful = 1;
}

// request for RemoveTenantUserFromTenant
message RemoveTenantUserFromTenantRequest {	
	string tenantId = 1;
	string userId = 2;
}

// request for AddUserToTenant
message AddUserToTenantRequest {
	string tenantId = 1;
	string userId = 2;
	// 用户所属角色名列表
	repeated string roleNameList = 3;
}

message AddUserToTenantResponse {
	UserInfo user = 1;
}

message FindTenantIdListByUserIdRequest {
	string userId = 1;
	// 应用
	string app = 2;
}

message FindTenantIdListByUserIdResponse {
	repeated string tenantIdList = 1;
	// 应用
	string app = 2;
}

// request for CreateTenant
message CreateTenantRequest {
	string name = 1;
	string displayName = 2;
	string creatorUserId = 3;
	repeated RoleInfo builtinRoles = 4;
	map<string, string> properties = 5;
	// 创建租户的应用
	string app = 6;
}

// response for CreateTenant
message CreateTenantResponse {
	TenantInfo tenant = 1;
	// 创建租户的应用
	string app = 2;
}

// request for DeleteTenant
message DeleteTenantRequest {
	string tenantId = 1;
}

// application signin method
message ApplicationSigninMethod {
	string Name        = 1;
	string DisplayName = 2;
	string Rule        = 3;
}

// application signin item
message ApplicationSigninItem {
	string Name		= 1;
	bool   Visible  = 2;
	string Rule     = 3;
	bool IsCustom   = 4;
}

// application signup item
message ApplicationSignupItem {
	string Name		= 1;
	bool Visible    = 2;
	bool Required   = 3;
	string Regex    = 4;
	string Rule     = 5;
}

// application info
message ApplicationInfo {
	string Owner			= 1;
	string Name     		= 2;
	string DisplayName  	= 3;
	string Logo         	= 4;
	string HomepageUrl  	= 5;
	string Description  	= 6;
	string Organization 	= 7;
	// enabled password 
	bool EnablePassword 	= 8;
	bool EnableSignUp   	= 9;
	bool EnableCodeSignin	= 10;
	repeated ApplicationSigninMethod SigninMethods	= 11;
	repeated ApplicationSignupItem SignupItems      = 12;
	repeated ApplicationSigninItem SigninItems      = 13;

	string SignupUrl	= 14;
	string SigninUrl	= 15;
	string ForgetUrl 	= 16;
}

// request for FindOneApplication
message FindOneApplicationRequest {
	string name = 1;
}

// request for FindOneApplication
message FindOneApplicationResponse {
	ApplicationInfo Application = 1;	
}